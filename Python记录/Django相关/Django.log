pip install django
pip install djangorestframework

django-admin startproject pslCloud
新建apps文件夹， cd apps
django-admin startapp accounts

django2.1版本不支持mysql5.5

python manage.py migrate


1.  python manage.py 的作用是能加载setting文件

2.Django连接mysql：
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # 数据库引擎
        'NAME': 'bishe', #数据库名称
        'USER': 'root', # 链接数据库的用户名
        'PASSWORD': '123', # 链接数据库的密码
        'HOST': '127.0.0.1', # mysql服务器的域名和ip地址
        'PORT': '3306', # mysql的一个端口号,默认是3306
    }
}
在python3.x中已经不支持mysqlDB，安装pymysql
在init.py中添加：
    import pymysql
    pymysql.install_as_MySQLdb() 



3. from django.http import HttpResponse/JsonResponse
    from django.shortcuts import render,redirect

4. python项目依赖生辰requirements.txt
    pip freeze > requirements.txt
    执行依赖文件命令：
    pip install -r requirements.txt

5.关联表的str属性设置其print或xadmin中列显示的值
6.在filter或all或get中，关联查询的语句（字段_ _关联表字段_ _比较符号）

7.使用lambda节省代码量
8.Query查询出来的数据使用.能够找到关联表的值
    filter，get查询语句是第6条
9.列表嵌套字典循环表中数据时，字典设定要放在for循环里面
10.格式化时间为字符串：
itemData['attendStartTime'] = item.attendStartTime.strftime("%Y-%m-%d %H:%M:%S") if item.attendStartTime is not None else None
11.如果遇到更改模型增加外键时无法执行migrate成功时：
    先添加null=True，执行成功后，将数据库里面的附上值，并删除迁移文件，最后将null=True删除，再次执行迁移
12.前端知识 autocomplete="off"不自动填充表单
13.alert（字符串）则很可能需要Json.parse
14.测试celery的时候遇到了没有下载应用程序的错误
    解决办法：import django
            django.setup()
且必须是这种形式
import time
from celery import task
import django
django.setup()
15.django安装xadmin，直接pip install xadmin会报字符编码错误
 下载 zip 安装包 
https://github.com/sshwsfc/xadmin 
新建空白文件README.rst 压缩进 zip ，(必须是zip，rar不行)中替换掉同名文件
然后使用pip install xadmin-master进行安装(使用已经修改好适配django2.x版本bishe中的xadmin)
15.ERROR: Pidfile (celerybeat.pid) already exists. Seems we're already running? (pid: 11068)

解决方法：

删除项目下 celertbeat.pid文件即可
python manage.py celery worker --loglevel=info
python manage.py celery beat --loglevel=info

16.django的one to one field查询如：
class Account(models.Model):
    username = models.CharField(max_length=20, null=True)
    password = models.CharField(max_length=40, null=True)
class Contact(models.Model):
    address = models.CharField(max_length=100, null=True)
    mobile = models.CharField(max_length=20, null=True)
    account = models.OneToOneField(Account, on_delete=models.CASCADE)
正向查询: Account.objects.get(id=1).contact.address
反向查询:Contact.objects.get(id=1).account.username 
ForeignKey和ManyToManyField
class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()
class Author(models.Model):
    name = models.CharField(max_length=50)
    email = models.EmailField()

class Entry(models.Model):
    blog = models.ForeignKey(Blog)
    authors = models.ManyToManyField(Author)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    n_comments = models.IntegerField()
    n_pingbacks = models.IntegerField()
    rating = models.IntegerField()
正向查询：e = Entry.objects.get(id=2) e.blog
        Entry.objects.filter(blog__name='Beatles Blog')
反向查询: b = Blog.objects.get(id=1) b.entry_set.all()
ManyToManyField的查询:
from django.db import models

class Person(models.Model):
    name = models.CharField(max_length=50)

class Group(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(Person, through='Membership', through_fields=('group', 'person'))

class Membership(models.Model):
    group = models.ForeignKey(Group)
    person = models.ForeignKey(Person)
    inviter = models.ForeignKey(Person, related_name="membership_invites")
    invite_reason = models.CharField(max_length=64)
正向查询:e = Group.objects.get(id=3) e.members.all()
反向查询:a = Person.objects.get(id=1) a.group_set.all()            

17.当celery出现：ValueError: not enough values to unpack (expected 3, got 0)时
使用celery -A avlcloud_api worker --pool=solo -l info
1.rest_framework相关包
from django.db import models

from rest_framework import serializers
import subprocess
from django.http import HttpResponse
from django.db import models
from rest_framework.viewsets import ModelViewSet
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .serializers import CodeListSerializer, CodeSerializer
from .models import Code
from rest_framework.authentication import SessionAuthentication

5.django中使用celery
启动celery:celery -A celeryProj worker --pool=solo -l info 

celery beat -A avlcloud -l info
#每2个小时中每分钟执行1次任务
crontab(hour='*/2')
 
#每3个小时的0分时刻执行1次任务
#即[0,3,6,9,12,15,18,21]点0分
crontab(minute=0, hour='*/3')
 
#每3个小时或8点到12点的0分时刻执行1次任务
#即[0,3,6,9,12,15,18,21]+[8,9,10,11,12]点0分
crontab(minute=0, hour='*/3,8-12')
 
#每个季度的第1个月中，每天每分钟执行1次任务
#月份范围是1-12，每3个月为[1,4,7,10]
crontab(month_of_year='*/3')
 
#每月偶数天数的0点0分时刻执行1次任务
crontab(minute=0, hour=0, day_of_month='2-31/2')
 
#每年5月11号的0点0分时刻执行1次任务
crontab(0, 0, day_of_month='11', month_of_year='5')
12.
minio_name = serializers.CharField(source='minio_policy.policy_name')
["datasets","mybucketes"]
["mybucket/confi/"]